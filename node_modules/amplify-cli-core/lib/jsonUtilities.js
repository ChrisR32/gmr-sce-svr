"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONUtilities = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const hjson = __importStar(require("hjson"));
class JSONUtilities {
}
exports.JSONUtilities = JSONUtilities;
JSONUtilities.readJson = async (fileName, options) => {
    if (!fileName) {
        throw new Error(`'fileName' argument missing`);
    }
    const mergedOptions = {
        throwIfNotExist: true,
        preserveComments: false,
        ...options,
    };
    if (!fs.existsSync(fileName)) {
        if (mergedOptions.throwIfNotExist) {
            throw new Error(`File at path: '${fileName}' does not exist`);
        }
        else {
            return undefined;
        }
    }
    const content = await fs.readFile(fileName, 'utf8');
    const data = JSONUtilities.parse(content, {
        preserveComments: mergedOptions.preserveComments,
    });
    return data;
};
JSONUtilities.writeJson = async (fileName, data, options) => {
    if (!fileName) {
        throw new Error(`'fileName' argument missing`);
    }
    if (!data) {
        throw new Error(`'data' argument missing`);
    }
    const mergedOptions = {
        minify: false,
        keepComments: false,
        ...options,
    };
    const jsonString = JSONUtilities.stringify(data, {
        minify: mergedOptions.minify,
        keepComments: mergedOptions.keepComments,
    });
    const dirPath = path.dirname(fileName);
    await fs.ensureDir(dirPath);
    await fs.writeFile(fileName, jsonString, 'utf8');
};
JSONUtilities.parse = (jsonString, options) => {
    if (!jsonString || jsonString.trim().length === 0) {
        throw new Error("'jsonString' argument missing");
    }
    const mergedOptions = {
        preserveComments: false,
        ...options,
    };
    let cleanString = jsonString;
    if (cleanString.charCodeAt(0) === 0xfeff) {
        cleanString = cleanString.slice(1);
    }
    const data = hjson.parse(cleanString, {
        keepWsc: mergedOptions.preserveComments,
    });
    return data;
};
JSONUtilities.stringify = (data, options) => {
    if (!data) {
        throw new Error("'data' argument missing");
    }
    const mergedOptions = {
        minify: false,
        keepComments: false,
        ...options,
    };
    let jsonString = '';
    if (mergedOptions.minify) {
        jsonString = JSON.stringify(data);
    }
    else {
        jsonString = hjson.stringify(data, {
            space: 2,
            separator: true,
            quotes: 'all',
            keepWsc: mergedOptions.keepComments,
        });
    }
    return jsonString;
};
//# sourceMappingURL=jsonUtilities.js.map