"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureFlagFileProvider = void 0;
const fs = __importStar(require("fs-extra"));
const _ = __importStar(require("lodash"));
const path = __importStar(require("path"));
const __1 = require("..");
const constants_1 = require("../constants");
class FeatureFlagFileProvider {
    constructor(environmentProvider, options = {}) {
        this.environmentProvider = environmentProvider;
        this.options = options;
        this.load = async () => {
            if (!this.options.projectPath) {
                throw new Error(`'projectPath' option is missing`);
            }
            if (!(await fs.pathExists(this.options.projectPath))) {
                throw new Error(`Project path: '${this.options.projectPath}' does not exist.`);
            }
            const result = {
                project: {},
                environments: {},
            };
            const projectConfigFileName = path.join(this.options.projectPath, constants_1.amplifyConfigFileName);
            const projectFeatures = await this.loadConfig(projectConfigFileName);
            if (projectFeatures) {
                result.project = projectFeatures;
            }
            const envName = this.environmentProvider.getCurrentEnvName();
            if (envName !== '') {
                const envConfigFileName = path.join(this.options.projectPath, constants_1.amplifyConfigEnvFileNameTemplate(envName));
                const envFeatures = await this.loadConfig(envConfigFileName);
                if (envFeatures) {
                    result.environments[envName] = envFeatures;
                }
            }
            return result;
        };
        this.loadConfig = async (fileName) => {
            const configFileData = await __1.JSONUtilities.readJson(fileName, {
                throwIfNotExist: false,
            });
            if (!configFileData || !configFileData.features) {
                return undefined;
            }
            const toLower = (result, val, key) => {
                result[key.toLowerCase()] = val;
            };
            const mappedFeatures = Object.keys(configFileData.features).reduce((ffe, f) => {
                ffe[f.toLowerCase()] = _.transform(configFileData.features[f], toLower);
                return ffe;
            }, {});
            return mappedFeatures;
        };
    }
}
exports.FeatureFlagFileProvider = FeatureFlagFileProvider;
//# sourceMappingURL=featureFlagFileProvider.js.map